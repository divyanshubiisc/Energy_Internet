#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Wed Feb 13 19:28:24 2019

@author: div
"""
import sys
sys.path.append('/home/pi/Desktop/i2c_pi/Energy_Router/')
from global_var import par_var
import struct
import time
import smbus
class message_send:
    def send_i2c(self,bus,slave_addr,command,data):
#    try:
#        print str(len(data))
    #    for rows in range(len(data)):
#        print len(data)
    #    print rows
        #print data
        #print command
        #print ("Sending message in message_send function")
        i=0
        while True:
            try:
                #print("slave",slave_addr)
#                print("data",data)
                bus.write_block_data(slave_addr,command,data)
                break
            except:
                if i == 5:
                    print("ERROR -> message_slave -> send_i2c")
                    print("slave address",slave_addr)
                    break
                i = i+1
                pass
            
        
    def receive_i2c(self,bus,slave_addr,command,byte_s):
        #print ("Receiving message")
#        try:
        i=0
        while True:
            try:
                return bus.read_i2c_block_data(slave_addr,command,byte_s)
                break
            except:
                if i == 5:
                    print("ERROR -> message_slave -> receive_i2c")
                    print("slave address",slave_addr)
                    break
                i = i+1
                pass
        
#        except:
#            pass
        
    def msg_pack(self,data,order):
        par_obj=par_var()
        total_number=len(order)
        list_msg=[]
        total_msg_size=0
        for param in range(len(data)):
            if(order[param]==par_obj.VOLTAGE):
                for param_char in range(par_obj.VOLTAGE_TYPE_SIZE):
                    list_msg.append(ord(data[param][param_char]))
                list_msg.append(ord(','))
            elif(order[param]==par_obj.CURRENT):
                for param_char in range(par_obj.CURRENT_TYPE_SIZE):
                    list_msg.append(ord(data[param][param_char]))
                list_msg.append(ord(','))
                total_msg_size=total_msg_size+1
            elif(order[param]==par_obj.SLAVEID):
        #            msg=msg+chr(data[param])
                list_msg.append((data[param]))
                list_msg.append(ord(','))
            elif(order[param]==par_obj.DIRECTION):
                list_msg.append(data[param])
                list_msg.append(ord(','))
        total_msg_size=total_msg_size+2
        #print list_msg
        return list_msg
    def msg_unpack(self,data,param_count):
        par_obj=par_var()
        parameter_list=[]
#        total_number=len(param_count)
        if data:
            for count in range(param_count):
                x=""
                for i in reversed(range(count*4,(count+1)*4)):
                    y=format(data[i],'x').zfill(2)
    #            y.format(':2s')
                    x=x+y
#            print (struct.unpack('!f',x.decode('hex'))[0])
                parameter_list.append(struct.unpack('!f',x.decode('hex'))[0])
        
            return parameter_list
        else:
            print("Connection timeout")
            return parameter_list
    def voltage_float_hex(self,v_f):
        return str(struct.pack('<f',v_f))    
    
    def current_float_hex(self,c_f):
        return str(struct.pack('<f',c_f))    
    
    def voltage_hex_float(self,v_hex_l):
#        return struct.unpack('<B', v_hex_l)
        pass

    def current_hex_float(self,c_hex_l):
        pass


if __name__ =='__main__':
    bus=smbus.SMBus(1) 
    msg_c_obj = message_send()
    time.sleep(4)
    msg_c_obj.send_i2c(bus,0x32,0x80,[8])
    time.sleep(3)
    x=msg_c_obj.receive_i2c(bus,0x32,0x23,8)
    print x
    param=msg_c_obj.msg_unpack(x,2)
