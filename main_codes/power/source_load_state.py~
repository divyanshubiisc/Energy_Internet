#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Wed Feb 13 19:41:04 2019

@author: div
"""

import smbus
import time
from threading import Timer, Event, Thread
#from main_codes.message_slave import par_var
from global_var import par_var, fb_var
from main_codes.power import message_send
import signal
import struct

local_load_list=[]
local_source_list=[]

batt_voltage =0

def state_switch(bus,change_type,Source_list,Load_list):
    
    par_obj = par_var()
    msg_c_obj = message_send()
    print "In the loop for changing the state of the switches"
    
    total_amp_av=0
    total_load_rq=0
    voltage=14
    
    print par_obj.CURRENT
    
##    for rows in range(len(local_source_list)):
##        total_amp_av += local_source_list[rows].current_aval
##    
##    for rows in range(len(Load_list)):
##        if(local_load_list[rows].current_reqd <= par_obj.conv_max_current):                
##            total_load_rq += local_load_list[rows].current_reqd
##            local_load_list[rows].actual_curr = local_load_list[rows].current_reqd
##        else:
##            total_load_rq += par_obj.conv_max_current
##            local_load_list[rows].actual_curr = par_obj.conv_max_current
##    print "loop"
##    star ='*' * 50
##    print (star)
##    print ("TOTAL AMP AVAILABLE")
##    print total_amp_av
##    print (star)
##    print ("TOTAL AMP REQUIRED")
##    print total_load_rq
##    print (star)
#    print i
    
    
    if(total_amp_av>=total_load_rq):
        if total_amp_av!=0:
            mul_factor=total_load_rq/total_amp_av
        else:
            mul_factor=0
#        print "if complete"
#        for rows in range(len(local_load_list)):
#            if(local_load_list[rows].state == par_obj.START_UPDATE_STATE):
#            # STARTING CONVERTER BASED ON THE PORTS GIVEN AND WITH NO DUTY OUT
#                if(local_load_list[rows].port==1):
#                    print "Sending start port 1"
#                    send_i2c(par_obj.slaveid[0],par_obj.START_COMMAND,[ord("0")])
##                    local_load_list[rows].state = par_obj.PARAM_UPDATE_STATE
#                    
#                elif(local_load_list[rows].port==2):
#                    print "Sending start port 1"
#                    send_i2c(par_obj.slaveid[1],par_obj.START_COMMAND,[ord("0")])
##                    local_load_list[rows].state = par_obj.PARAM_UPDATE_STATE
#                    
#            elif(local_load_list[rows].state == par_obj.PARAM_UPDATE_STATE):
#    
#                if(local_load_list[rows].port == 1):
#                    current = local_load_list[rows].actual_curr
#                    print current
#                    data=[voltage_float_hex(voltage),current_float_hex(current),par_obj.LOAD_DIRECTION]
#                    data_type_order=[par_obj.VOLTAGE,par_obj.CURRENT,par_obj.DIRECTION]    
#                    message=msg_pack(data,data_type_order)
#                    
#                    print "slave id"  + str(par_obj.slaveid[0])
#                    
#                    send_i2c(par_obj.slaveid[0],PARAM_COMMAND,message)    
#                elif(local_load_list[rows].port == 2):
#    #                    voltage = 13.2
#                    current = local_load_list[rows].actual_curr
#                    print current
#                    data=[voltage_float_hex(voltage),current_float_hex(current),par_obj.LOAD_DIRECTION]
#                    data_type_order=[par_obj.VOLTAGE,par_obj.CURRENT,par_obj.DIRECTION]    
#                    message=msg_pack(data,data_type_order)
#                    
#                    print "slave id"  + str(par_obj.slaveid[1])
#                    print message
##                    send_i2c(par_obj.slaveid[1],0x12,message)
#            elif(local_load_list[rows].state == par_obj.STOP_UPDATE_STATE):
#                if(local_load_list[rows].port==1):
#                    print "Sending start port 1"
#                    send_i2c(par_obj.slaveid[0],par_obj.STOP_COMMAND,[ord("0")])
#                    local_load_list[rows].state = par_obj.START_UPDATE_STATE
#                    
#                elif(local_load_list[rows].port==2):
#                    print "Sending start port 1"
#                    send_i2c(par_obj.slaveid[1],par_obj.STOP_COMMAND,[ord("0")])
#                    local_load_list[rows].state = par_obj.START_UPDATE_STATE

    
    
        for rows in range(len(local_source_list)):
            if(local_source_list[rows].state == par_obj.PARAM_UPDATE_STATE):
#                print ("1st enter if loop")
#                print type(local_source_list[rows].port)
                if(local_source_list[rows].port == "1"):
#                    print"2nd enter if loop"
#                    print mul_factor
                    local_source_list[rows].actual_curr = local_source_list[rows].current_aval * mul_factor
                    voltage= local_source_list[rows].min_volt
                    current = local_source_list[rows].actual_curr
                    
                    data=[msg_c_obj.voltage_float_hex(voltage),msg_c_obj.current_float_hex(current),par_obj.SOURCE_DIRECTION]
#                    data=[14,2.4,par_obj.SOURCE_DIRECTION]
                    data_type_order=[par_obj.VOLTAGE,par_obj.CURRENT,par_obj.DIRECTION]    
                    message=msg_c_obj.msg_pack(data,data_type_order)
                    
                    print "slave id"  + str(par_obj.slaveid[0])
                    
                    msg_c_obj.send_i2c(bus,par_obj.slaveid[0],par_obj.PARAM_COMMAND,message)    
                elif(local_source_list[rows].port == "2"):
                    print mul_factor
                    local_source_list[rows].actual_curr = local_source_list[rows].current_aval * mul_factor
                    current = local_source_list[rows].actual_curr
                    
                    data=[msg_c_obj.voltage_float_hex(voltage),msg_c_obj.current_float_hex(current),par_obj.SOURCE_DIRECTION]
                    data_type_order=[par_obj.VOLTAGE,par_obj.CURRENT,par_obj.DIRECTION]    
                    message=msg_c_obj.msg_pack(data,data_type_order)
                    
                    print "slave id"  + str(par_obj.slaveid[1])
                    
                    msg_c_obj.send_i2c(bus,par_obj.slaveid[1],par_obj.PARAM_COMMAND,message)
                    
            elif(local_source_list[rows].state == par_obj.STOP_UPDATE_STATE):
                if(local_source_list[rows].port=="1"):
                    print "Sending start port 1"
                    msg_c_obj.send_i2c(bus,par_obj.slaveid[0],par_obj.STOP_COMMAND,[ord("0")])
                    local_source_list[rows].state = par_obj.START_UPDATE_STATE
                    
                elif(local_source_list[rows].port=="2"):
                    print "Sending start port 1"
                    msg_c_obj.send_i2c(bus,par_obj.slaveid[1],par_obj.STOP_COMMAND,[ord("0")])
                    local_source_list[rows].state = par_obj.START_UPDATE_STATE
        time.sleep(0.01)
        
        
        
        
#    if(i==1):
#        time.sleep(5)
#        Load_list[0].state=par_obj.STOP_UPDATE_STATE
#        Source_list[0].state=par_obj.STOP_UPDATE_STATE
#    elif(i==0):
#        time.sleep(1)
#    i=i+1     

#i=0

    
        
def batt_voltage_f(bus):
    global batt_voltage
    while True:
        batt_voltage=14.2
#        print "Battery_voltage Thread"
        time.sleep(1)

def poll_slave_f(bus,Feedback_list):
    global local_source_list
    param=[]
#    par_obj = par_var()
    msg_c_obj = message_send()
    par_obj = par_var()
    time.sleep(4)
    msg_c_obj.send_i2c(bus,0x32,0x80,[8])
    time.sleep(3)
    x=msg_c_obj.receive_i2c(bus,0x32,0x23,8)
    print x
    param=msg_c_obj.msg_unpack(x,2)
    print param
    while True:
        for slave in range(len(par_obj.slaveid)):
            try:
                msg_c_obj.send_i2c(bus,par_obj.slaveid[slave],0x80,[8])
                time.sleep(3)
                x=msg_c_obj.receive_i2c(bus,0x32,0x23,8)
#                print x
                param=msg_c_obj.msg_unpack(x,2)
#                print param
#                
#                print slave                
                
                Feedback_list[slave].voltage_port1 = param[0]
                Feedback_list[slave].voltage_port2 = param[1]
                
                
            except:
                print "Not present"
#            print len(Feedback_list)
#            for i in range(len(Feedback_list)):
#                print "YESE"+str(i)
#                print vars(Feedback_list[i])
        time.sleep(3)
#        print "Polling"
        
def list_add_check_f(Source_list, Load_list):
    
    add_sig=0
    global local_load_list
    global local_source_list
    
    for global_i in range(len(Load_list)):
        for local_i in range(len(local_load_list)):
            if( Load_list[global_i].id == local_load_list[local_i].id):
                print "User id matched"
                break
            else:
                if( local_i == (len(local_load_list)-1)): # new user detected
                    local_load_list.append(Load_list[global_i])
                    print "New user detected"
                else:
                    print "NO loop"

    for global_i in range(len(Source_list)):
        for local_i in range(len(local_source_list)):
            if( Source_list[global_i].id == local_source_list[local_i].id):
                print "User id matched"
                break
            else:
                if( local_i == (len(local_source_list)-1)): # new user detected
                    local_source_list.append(Source_list[global_i])
                    print "New user detected"
                else:
                    print "NO loop"


def list_del_check_f(Source_list, Load_list):
    
    global local_load_list
    global local_source_list
    
    delete_arr=[]
    
    for local_i in range(len(local_load_list)):
        print "LOCAL_I" + str(local_i)
        for global_i in range (len(Load_list)):
            print "GLOBAL_I" + str(global_i)                    
            if( local_load_list[local_i].id == Load_list[global_i].id):
                print "DELETE: User ID Matched"
                break
            else:
                if(global_i == (len(Load_list)-1)):
                    delete_arr.append(local_i)
                    print "Deleted"
                else:
                    print "DELETE: NO LOOP"
                    
    print delete_arr
    for i in reversed(range(len(delete_arr))): # for not changing the order of list for deleting
        local_load_list.pop(delete_arr[i])
    pass

    delete_arr=[]
    
    for local_i in range(len(local_source_list)):
        print "LOCAL_I" + str(local_i)
        for global_i in range (len(Source_list)):
            print "GLOBAL_I" + str(global_i)                    
            if( local_source_list[local_i].id == Source_list[global_i].id):
                print "DELETE: User ID Matched"
                break
            else:
                if(global_i == (len(Source_list)-1)):
                    delete_arr.append(local_i)
                    print "Deleted"
                else:
                    print "DELETE: NO LOOP"
                    
    print delete_arr
    for i in reversed(range(len(delete_arr))):
        local_source_list.pop(delete_arr[i])
    pass


def list_update_f(Source_list, Load_list):
    
    global local_load_list
    global local_source_list
    
    for local_i in range(len(local_load_list)):
        for global_i in range (len(Load_list)):
            if( local_load_list[local_i].id == Load_list[global_i].id):
                #start checking for any update
                local_load_list[local_i] = Load_list[global_i]
                print "UPDATED"

    for local_i in range(len(local_source_list)):
        for global_i in range (len(Source_list)):
            if( local_source_list[local_i].id == Source_list[global_i].id):
                #start checking for any update
                local_source_list[local_i] = Source_list[global_i]
                print "UPDATED"


def list_check_f(Source_list, Load_list):
    
#   Checking for the load list change in data
    
#    print len(local_load_list)
    
    global local_load_list
    if len(local_load_list) == 0:
        if(len(Load_list)==0):
            print "\n\nGLOBAL LIST EMPTY  | LOCAL EMPTY"
        else:
            for i in range(len(Load_list)):
                local_load_list.append(Load_list[i])
                print "\n*************************************"
                print "\n"
                print (vars(Load_list[i]))
            print "\n LOCAL LIST EMPTY  | GLOBAL NOT EMPTY"
    else:
        if(len(Load_list) == 0):
            print "\n GLOBAL LIST EMPTY  | LOCAL NOT EMPTY"
            for i in range(len(local_load_list)):
                local_load_list.pop(i)
        else:
            list_add_check_f(Source_list,Load_list)            
            list_del_check_f(Source_list,Load_list)
            list_update_f(Source_list,Load_list)
                            
    
    
    if len(local_source_list) == 0:
        if(len(Source_list)==0):
            print "\n\nGLOBAL LIST EMPTY  | LOCAL EMPTY"
        else:
            for i in range(len(Source_list)):
                local_source_list.append(Source_list[i])
                print "\n*************************************"
                print "\n"
                print (vars(Source_list[i]))
            print "\n LOCAL LIST EMPTY  | GLOBAL NOT EMPTY"
    else:
        if(len(Source_list) == 0):
            print "\n GLOBAL LIST EMPTY  | LOCAL NOT EMPTY"
            for i in range(len(local_source_list)):
                local_source_list.pop(i)
        else:
            list_add_check_f(Source_list,Load_list)            
            list_del_check_f(Source_list,Load_list)
            list_update_f(Source_list,Load_list)
        
#    local_load_list.append(Load_list[0])
#    print local_load_list
    
    pass
def table(local_load_list,local_source_list):
    
#            self.ip_address=None
#        self.port=None 
#        self.id=None 
#        self.type=None 
#        self.value=None 
#        self.min_volt=0 
#        self.max_volt=0
#        self.min_curr=0 
#        self.max_curr=0 
#        self.current_reqd=0
#        self.state=0
#        self.actual_curr=0
    dash = '-' * 40
    for i in range(len(local_load_list)):
        if i==0:
            print(dash)
            print "LOAD LIST"
            print(dash)
            print('{:<18s}{:>6s}{:>6s}{:>12s}{:>6s}{:>13s}{:>13s}'.format("IP_ADDRESS","PORT","ID","TYPE","STATE","CURRENT","ACTUAL_CURR"))
            print (dash)
        
        print ('{:<18s}{:>6d}{:>6s}{:>12s}{:>6d}{:>13f}{:>13f}'.format(local_load_list[i].ip_address,local_load_list[i].port,local_load_list[i].id,str(local_load_list[i].type),local_load_list[i].state,local_load_list[i].current_reqd,local_load_list[i].actual_curr))

    for i in range(len(local_source_list)):
        if i==0:
            print(dash)
            print "SOURCE LIST"
            print(dash)
            print('{:<18s}{:>6s}{:>6s}{:>12s}{:>6s}{:>13s}{:>13s}'.format("IP_ADDRESS","PORT","ID","TYPE","STATE","CURRENT","ACTUAL_CURR"))
            print (dash)
        
        print ('{:<18s}{:>6s}{:>6s}{:>12s}{:>6d}{:>13f}{:>13f}'.format(local_source_list[i].ip_address,local_source_list[i].port,local_source_list[i].id,str(local_source_list[i].type),local_source_list[i].state,local_source_list[i].current_aval,local_source_list[i].actual_curr))

def feedback_list_append(Feedback_list):
    par_obj = par_var()
    for i in range(par_obj.ports):
        Feedback_list.append(fb_var())
        print Feedback_list

def master_main(list_change_event,Source_list,Load_list,Feedback_list):
    
    global local_load_list
    
    feedback_list_append(Feedback_list)    
    
    bus=smbus.SMBus(1)       
    
    batt_thread = Thread(target = batt_voltage_f,args=(bus,))
    batt_thread.daemon=True     
    
    #slave_poll_thread = Thread(target = poll_slave_f,args=(bus,Feedback_list))
    #slave_poll_thread.daemon = True
    
    batt_thread.start()    
    print "\nBattery_thread_started"
    #slave_poll_thread.start()
    print "\nslave_poll_thread_started"
    
    while True:
        list_change_event.wait()
        if list_change_event.is_set():
            list_change_event.clear()
            
            print "*************************************************"
            print "Before LOOP"
            print local_load_list
            print "*************************************************"

            list_check_f(Source_list, Load_list)
            
            print "*************************************************"
            print "After LOOP"
            print local_load_list
            print "*************************************************"
                
            table(local_load_list,local_source_list)
            
            state_switch(bus,0,local_source_list,local_load_list)
                        

if __name__ == "__main__":
    
    
#    Source_list= []
#    Load_list = []
#    comm_to_power_change_event = Event()
#    
#    
##    main_loop_th = Thread(target=master_main,args=(comm_to_power_change_event,Source_list,Load_list))
#    debug_thread = Thread(target=debug_code,args=())
#    debug_thread.daemon = True
#    debug_thread.start()
#
##    main_loop_th.daemon = True
##    main_loop_th.start()
#    pass
    pass
#    state_switch(0,0,0)
