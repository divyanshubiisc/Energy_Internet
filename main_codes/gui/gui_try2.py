#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 21, 2019 12:25:19 PM IST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import gui_try2_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    print("entered  vp_start_gui function" )
    root = tk.Tk()
    top = Toplevel1 (root)
    print ("Toplevel1",top)
    gui_try2_support.init(root, top)
    
    #top.update_iplist()
    #top.update_source_load()
    #top.update_votage_current()
    #root.mainloop()
    print("vp_start_gui root {0} top {1}".format(root,top))
    return root,top

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    gui_try2_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1261x962+488+47")
        top.title("New Toplevel")
        top.configure(highlightcolor="black")

        self.TFrame1 = ttk.Frame(top)
        self.TFrame1.place(relx=0.063, rely=0.094, relheight=0.473
                , relwidth=0.345)
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")
        self.TFrame1.configure(width=435)

        self.style.configure('Treeview.Heading',  font="TkDefaultFont")
        self.Scrolledtreeview1 = ScrolledTreeView(self.TFrame1)
        self.Scrolledtreeview1.place(relx=0.023, rely=0.022, relheight=0.963
                , relwidth=0.943)   
        self.Scrolledtreeview1.configure(columns="Col1")
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0",text="Tree")
        self.Scrolledtreeview1.heading("#0",anchor="center")
        self.Scrolledtreeview1.column("#0",width="198")
        self.Scrolledtreeview1.column("#0",minwidth="20")
        self.Scrolledtreeview1.column("#0",stretch="1")
        self.Scrolledtreeview1.column("#0",anchor="w")
        self.Scrolledtreeview1.heading("Col1",text="Col1")
        self.Scrolledtreeview1.heading("Col1",anchor="center")
        self.Scrolledtreeview1.column("Col1",width="198")
        self.Scrolledtreeview1.column("Col1",minwidth="20")
        self.Scrolledtreeview1.column("Col1",stretch="1")
        self.Scrolledtreeview1.column("Col1",anchor="w")
        
        self.Scrolledtreeview1["columns"] =["IP","PORT","MAC"]
        self.Scrolledtreeview1["show"]    ="headings"
        self.Scrolledtreeview1.heading("IP",text ="IP")
        self.Scrolledtreeview1.heading("PORT",text ="PORT")
        self.Scrolledtreeview1.heading("MAC",text ="MAC")
        self.Scrolledtreeview1.column("IP",anchor='center',width =150)
        self.Scrolledtreeview1.column("PORT",anchor='center',width =50)
        self.Scrolledtreeview1.column("MAC",anchor='center',width =150)
        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.TFrame1_1 = ttk.Frame(top)
        self.TFrame1_1.place(relx=0.523, rely=0.094, relheight=0.473
                , relwidth=0.416)
        self.TFrame1_1.configure(relief='groove')
        self.TFrame1_1.configure(borderwidth="2")
        self.TFrame1_1.configure(relief="groove")
        self.TFrame1_1.configure(width=525)

        self.Scrolledtreeview1_2 = ScrolledTreeView(self.TFrame1_1)
        self.Scrolledtreeview1_2.place(relx=0.019, rely=0.022, relheight=0.941
                , relwidth=0.952)
        self.Scrolledtreeview1_2.configure(columns="Col1")
        # build_treeview_support starting.
        self.Scrolledtreeview1_2.heading("#0",text="Tree")
        self.Scrolledtreeview1_2.heading("#0",anchor="center")
        self.Scrolledtreeview1_2.column("#0",width="243")
        self.Scrolledtreeview1_2.column("#0",minwidth="20")
        self.Scrolledtreeview1_2.column("#0",stretch="1")
        self.Scrolledtreeview1_2.column("#0",anchor="w")
        self.Scrolledtreeview1_2.heading("Col1",text="Col1")
        self.Scrolledtreeview1_2.heading("Col1",anchor="center")
        self.Scrolledtreeview1_2.column("Col1",width="243")
        self.Scrolledtreeview1_2.column("Col1",minwidth="20")
        self.Scrolledtreeview1_2.column("Col1",stretch="1")
        self.Scrolledtreeview1_2.column("Col1",anchor="w")
        self.Scrolledtreeview1_2["columns"] =["IP","PORT","TYPE"]
        self.Scrolledtreeview1_2["show"]    ="headings"
        self.Scrolledtreeview1_2.heading("IP",text ="IP")
        self.Scrolledtreeview1_2.heading("PORT",text ="PORT")
        self.Scrolledtreeview1_2.heading("TYPE",text ="TYPE")
        #self.Scrolledtreeview1.heading("MAC",text ="MAC")
        self.Scrolledtreeview1_2.column("IP",anchor='center',width =150)
        self.Scrolledtreeview1_2.column("PORT",anchor='center',width =50)
        self.Scrolledtreeview1_2.column("TYPE",anchor='center',width =50)
        #self.Scrolledtreeview1.column("MAC",anchor='center',width =150)


        self.TFrame1_3 = ttk.Frame(top)
        self.TFrame1_3.place(relx=0.103, rely=0.655, relheight=0.317
                , relwidth=0.781)
        self.TFrame1_3.configure(relief='groove')
        self.TFrame1_3.configure(borderwidth="2")
        self.TFrame1_3.configure(relief="groove")
        self.TFrame1_3.configure(width=985)

        self.Scrolledtreeview1_4 = ScrolledTreeView(self.TFrame1_3)
        self.Scrolledtreeview1_4.place(relx=0.01, rely=0.033, relheight=0.944
                , relwidth=0.975)
        self.Scrolledtreeview1_4.configure(columns="Col1")
        # build_treeview_support starting.
        self.Scrolledtreeview1_4.heading("#0",text="Tree")
        self.Scrolledtreeview1_4.heading("#0",anchor="center")
        self.Scrolledtreeview1_4.column("#0",width="473")
        self.Scrolledtreeview1_4.column("#0",minwidth="20")
        self.Scrolledtreeview1_4.column("#0",stretch="1")
        self.Scrolledtreeview1_4.column("#0",anchor="w")
        self.Scrolledtreeview1_4.heading("Col1",text="Col1")
        self.Scrolledtreeview1_4.heading("Col1",anchor="center")
        self.Scrolledtreeview1_4.column("Col1",width="473")
        self.Scrolledtreeview1_4.column("Col1",minwidth="20")
        self.Scrolledtreeview1_4.column("Col1",stretch="1")
        self.Scrolledtreeview1_4.column("Col1",anchor="w")

        self.Scrolledtreeview1_4["columns"] =["PORT","VOLTAGE IN","VOLTAGE OUT", "CURRENT IN","CURRENT OUT"]
        self.Scrolledtreeview1_4["show"]    ="headings"
        self.Scrolledtreeview1_4.heading("PORT",text ="PORT")
        self.Scrolledtreeview1_4.heading("VOLTAGE IN",text ="VOLTAGE IN")
        self.Scrolledtreeview1_4.heading("VOLTAGE OUT",text ="VOLTAGE OUT")
        self.Scrolledtreeview1_4.heading("CURRENT IN",text ="CURRENT IN")
        self.Scrolledtreeview1_4.heading("CURRENT OUT",text ="CURRENT OUT")
        self.Scrolledtreeview1_4.column("PORT",anchor='center',width =50)
        self.Scrolledtreeview1_4.column("VOLTAGE IN",anchor='center',width =50)
        self.Scrolledtreeview1_4.column("VOLTAGE OUT",anchor='center',width =50)
        self.Scrolledtreeview1_4.column("CURRENT IN",anchor='center',width =50)
        self.Scrolledtreeview1_4.column("CURRENT OUT",anchor='center',width =50)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.143, rely=0.042, height=38, width=206)
        self.Label1.configure(text='''Switch Table''')
        self.Label1.configure(width=206)
        
        self.Label1_1 = tk.Label(top)
        self.Label1_1.place(relx=0.642, rely=0.042, height=38, width=206)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(text='''Source / Load''')

        self.Label1_2 = tk.Label(top)
        self.Label1_2.place(relx=0.404, rely=0.603, height=38, width=206)
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(text='''Electrical Parameter''')

    def update_iplist(self,Net_Table):
        try:
           for row in self.Scrolledtreeview1.get_children() :
                self.Scrolledtreeview1.delete(row)
        except:
                pass
        ip_index =0 
        iid = None 
        for row in Net_Table:
            self.Scrolledtreeview1.insert("",ip_index,iid,values=row)
            ip_index=ip_index+1
            
    def update_source_load(self,source_list,load_list):
        try:
           for row in self.Scrolledtreeview1_2.get_children() :
                self.Scrolledtreeview1_2.delete(row)
        except:
                print("****************update_source_load -> exception************")
        index =0
        iid   =None  
        #print("****************update_source_load -> source_list************")
        #print(source_list)
        for rows in source_list:
            row =(rows.ip_address,rows.port,"source")
            #print row
            self.Scrolledtreeview1_2.insert("",index,iid,values=row,tags =('source',))
            index=index+1
        #print("***************update_source_load -> load_list************")
            
        for rows in load_list:
            row =(rows.ip_address,rows.port,"load")
            #print row
            self.Scrolledtreeview1_2.insert("",index,iid,values=row,tags =('load',))
            index=iid =index+1
        self.Scrolledtreeview1_2.tag_configure('source', background='red')
        self.Scrolledtreeview1_2.tag_configure('load', background='blue')
        
    def update_votage_current(self,feedback_list):
        try:
           for row in self.Scrolledtreeview1_4.get_children() :
                self.Scrolledtreeview1_4.delete(row)
        except:
                pass
        index =0
        iid   =None   
        l1 = [(1,20,30,0,0.5),(2,2.5,0,0,1)]
        for i  in range(len(feedback_list)):
            #print("*******************gui_try->Update_Voltage**************************")
            #print(feedback_list[i].voltage_port1)
            row = ((i+1) ,feedback_list[i].voltage_port1 ,feedback_list[i].voltage_port2, feedback_list[i].current_port1, feedback_list[i].current_port2)
            self.Scrolledtreeview1_4.insert("",index,iid,values=row)
            #print("*******************GUI UPDATE VOLTAGE CURRENT****************************")
            #print(vars(rows))
            index=index+1
# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    root , gui_obj = vp_start_gui()
    print("gui_obj",gui_obj)
    root.mainloop()
    #pass
